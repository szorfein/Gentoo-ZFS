#! /bin/bash

ZFS_NAME="${ZFS_NAME:-rpool}"
DISK_ZFS="${DISK_ZFS:-}"
HOME_USERNAME="${HOME_USERNAME:-}"
DISK_SWAP="${DISK_SWAP:-}"
SWAP_SIZE="${SWAP_SIZE:-2G}"
ASHIFT_VALUE="${ASHIFT_VALUE:-9}"
TMP_MOUNT="${TMP_MOUNT:-/mnt}"
ROOT_NAME="${ROOT_NAME:-gentoo}"
DATABASE_PSQL="${DATABASE_PSQL:-}"
DATABASE_MSQL="${DATABASE_MSQL:-}"
ONLYDATASET="${ONLYDATASET:-}"

function howto() {
    cat <<- END

    -H  -  Is /home/<name>, default not created
    -z  -  zpool name, default is 'rpool' (yep... u want change that)
    -d  -  disk or partition here in /dev/disk/by-id/
    -s  -  Enable swap, default not created
    -S  -  Size of swap in gigabyte with 'G' like '2G', '3G', 4G', default is 2G
    -a  -  Enable Advanced Format disk if comptatible with sector size of 4096 byte (12^2=4096).
    -m  -  work directory, must be empty, default in /mnt
    -r  -  name of system, default is 'gentoo'
    -P  -  Create postgresql directory now, default no
    -M  -  Create Mysql directory now, default no
    -O  -  Only Create Datasets if pool have create pool manualy.
    -v  -  print help
    -h  -  print help too

Examples:
$0 -H ninja -z rpool -s -S 2G -a -d /dev/disk/by-id/ata-ST9500423AS_S2V0QX6A
$0 -z improbable_name_for_zpool -d /dev/disk/by-id/ata-ST9500423AS_S2V0QX6A-part3
$0 -z zpoolAlrealyExist -O -s -S 4G -P -M
END
    exit ${1}
}

function isEmpty() {
    local dir=$(ls $TMP_MOUNT | head -n 1)
    if [ $dir ] ; then return 1; fi
}

function checkPoolExist() {
    local BOOL=$(zpool status -v ${ZFS_NAME} | head -n 1)
    if [ -z $BOOL ] ; then echo "Pool doesn't exist"; return 1; fi
}

function ctrlParameter() {
    if [ -z $ZFS_NAME ] ; then howto 1; fi
    if [ -z $DISK_ZFS ] && [ -z $ONLYDATASET ]; then howto 1; fi
    if [ ! -d $DISK_ZFS ] && [ ! -L $DISK_ZFS ] ; then 
        echo "Disk, partition not exist"; return 1;
    fi

    if [ $ONLYDATASET ] ; then
        if ! checkPoolExist ; then echo "Pool unknown"; exit 1; fi
    fi

    if ! isEmpty ; then echo "$TMP_MOUNT is not empty"; return 1; fi
}

function addRoot() {
    if [ $ONLYDATASET ] ; then return 0; fi
    zpool create -o ashift=${ASHIFT_VALUE} -O atime=off -O compression=lz4 \
        -O normalization=formD \
        -O mountpoint=/ -O canmount=off \
        -O xattr=sa -O acltype=posixacl \
        -R ${TMP_MOUNT} \
        -O setuid=off -O devices=off \
        ${ZFS_NAME} ${DISK_ZFS} || return 1
    echo "Root created"
}

function addSubRoot() {
    zfs create -o mountpoint=none -o canmount=off ${ZFS_NAME}/ROOT || return 1
    zfs create -o mountpoint=/ -o setuid=on devices=on -o exec=on ${ZFS_NAME}/ROOT/${ROOT_NAME} || return 1
    echo "gentoo created"
}

function addUsr() {
    zfs create -o devices=off ${ZFS_NAME}/usr || return 1
    echo "usr created"
}

function addVar() {
    zfs create -o devices=off -o exec=off ${ZFS_NAME}/var || return 1
    zfs create -o com.sun:auto-snapshot=false \
        ${ZFS_NAME}/var/cache || return 1
    zfs create -o com.sun:auto-snapshot=false -o exec=on -o compression=off \
        -o sync=disabled ${ZFS_NAME}/var/tmp || return 1
    if [ $DATABASE_PSQL ] ; then
        zfs create -o recordsize=8k -o mountpoint=/var/lib/postgresql \
            -o primarycache=metadata ${ZFS_NAME}/var/postgres || return 1
        echo "postgresql created"
    fi
    if [ $DATABASE_MSQL ] ; then 
        zfs create -o recordsize=16k -o mountpoint=/var/lib/mysql \
            ${ZFS_NAME}/var/mysql || return 1
        echo "mysql created"
    fi
    echo "var/{log,cache,tmp} created"
}

function addHome() {
    zfs create -o setuid=off -o exec=off -o devices=off ${ZFS_NAME}/home || return 1
    zfs create -o mountpoint=/root \
        ${ZFS_NAME}/home/root || return 1
    if [ $HOME_USERNAME ] ; then 
        zfs create -o exec=on ${ZFS_NAME}/home/${HOME_USERNAME} || return 1; 
        echo "home/${HOME_USERNAME} created"
    else
        echo "home/{root} created"
    fi
}

function addOpt() {
    zfs create -o devices=off ${ZFS_NAME}/opt || return 1
    #zfs create ${ZFS_NAME}/opt/musics || return 1
    #zfs create ${ZFS_NAME}/opt/games || return 1
    #zfs create ${ZFS_NAME}/opt/backups || return 1
    echo "opt created"
}

function addSwap() {
    if [ $DISK_SWAP ] ; then
        zfs create -V ${SWAP_SIZE} -b $(getconf PAGESIZE) \
            -o compression=zle \
            -o logbias=throughput -o sync=always \
            -o primarycache=metadata -o secondarycache=none \
            -o com.sun:auto-snapshot=false ${ZFS_NAME}/swap || return 1
        echo "swap created"
    fi
}

function MakeTheJob() {
    if ! ctrlParameter ; then echo "Problem with parameter"; return 1; fi
    if ! addRoot ; then echo "Problem with root"; return 1; fi
    if ! addSubRoot ; then echo "Problem with subroot"; return 1; fi
    if ! addUsr ; then echo "Problem with usr"; return 1; fi
    if ! addVar ; then echo "Problem with var"; return 1; fi
    if ! addHome ; then echo "Problem with home"; return 1; fi
    if ! addOpt ; then echo "Problem with opt"; return 1; fi
    if ! addSwap ; then echo "Problem with swap"; return 1; fi
}

OPTERR=0

while getopts 'H:z:d:sS:am:r:PMOvh' arg ; do
    case "${arg}" in
        H ) HOME_USERNAME="${OPTARG}" ;;
        z ) ZFS_NAME="${OPTARG}" ;;
        d ) DISK_ZFS="${OPTARG}" ;;
        s ) DISK_SWAP=1 ;;
        S ) SWAP_SIZE="${OPTARG}" ;;
        a ) ASHIFT_VALUE=12 ;;
        m ) TMP_MOUNT="${OPTARG}" ;;
        r ) ROOT_NAME="${OPTARG}" ;;
        P ) DATABASE_PSQL=1 ;;
        M ) DATABASE_MSQL=1 ;;
        O ) ONLYDATASET=1 ;;
        v | h) howto 0 ;;
        *)
            echo "Invalid argument '${arg}'"
            howto 1
            ;;
    esac
done

shift $(($OPTIND - 1))

if MakeTheJob ; then
    echo "Format Success"
    exit 0
else
    echo "Format Fail"
    exit 1
fi
